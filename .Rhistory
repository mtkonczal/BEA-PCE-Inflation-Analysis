# use t-1 weight at end_date when available; else end_date weight
w_end  <- df_g$PCEweight[df_g$date == end_date]
w_lag1 <- df_g$PCEweight[df_g$date == (end_date %m-% months(1))]
w_use  <- ifelse(length(w_lag1) == 1, w_lag1, w_end)
if (length(w_use) == 0) return(NA_real_)
rate * w_use
}
# ── Helper: “since {start} to latest” using month-based annualizing ────────────
since_date_contrib <- function(df_g, start_date, annualize = FALSE) {
end_date <- max(df_g$date, na.rm = TRUE)
fixed_pair_contrib(df_g, start_date, end_date, annualize = annualize)
}
# ── Core: compute all requested columns for each category ───────────────────────
compute_contribs <- function(pce, categories = CHECK_ITEMS) {
p <- pce %>%
filter(LineDescription %in% categories) %>%
select(date, LineDescription, DataValue, PCEweight) %>%
arrange(LineDescription, date)
rolls <- p %>%
group_by(LineDescription) %>%
arrange(date, .by_group = TRUE) %>%
mutate(
m1_ann = period_contrib(pick(everything()), k_months = 1, annualize = TRUE),
m3_ann = period_contrib(pick(everything()), k_months = 3, annualize = TRUE)
) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(LineDescription, m1_ann, m3_ann)
anchors <- p %>%
group_by(LineDescription) %>%
summarize(
# Since Dec 2024 → latest, ANNUALIZED (month-count based)
since_d  = since_date_contrib(pick(everything()), as.Date("2024-12-01"), annualize = TRUE),
# Dec '23 → Dec '24 (12-month span): leave as raw Dec/Dec rate
yoy_2024 = fixed_pair_contrib(pick(everything()), as.Date("2023-12-01"), as.Date("2024-12-01"), annualize = FALSE),
# Dec '17 → Dec '19 (24 months), ANNUALIZED (month-count based)
a_1819   = fixed_pair_contrib(pick(everything()), as.Date("2017-12-01"), as.Date("2019-12-01"), annualize = TRUE),
.groups = "drop"
)
out <- rolls %>% left_join(anchors, by = "LineDescription")
out %>%
mutate(LineDescription = dplyr::recode(LineDescription, !!!RENAME_ORDER)) %>%
arrange(LineDescription)
}
# ── Core Non-Housing Services = services ex energy minus housing ────────────────
make_core_non_housing_services <- function(pce) {
parts <- compute_contribs(
pce,
categories = c("PCE services excluding energy", "Housing")
) %>%
mutate(key = sub("^\\d+\\s*[-–]\\s*", "", LineDescription))  # strip any "5 - " prefix
row_services <- parts %>% filter(str_detect(key, "(?i)^PCE services excluding energy$"))
row_housing  <- parts %>% filter(str_detect(key, "(?i)^Housing$"))
if (nrow(row_services) != 1 || nrow(row_housing) != 1) return(tibble())
measure_cols <- c("m1_ann","m3_ann","since_d","yoy_2024","a_1819")
diffs <- tibble(
LineDescription = "4 - Core Non-Housing Services"
) |>
bind_cols(as_tibble(purrr::map_dfc(measure_cols, ~ row_services[[.x]] - row_housing[[.x]])) |>
set_names(measure_cols))
diffs
}
# ── Assemble final table (adds Core NHS, drops baseline services row) ───────────
assemble_table <- function(pce) {
base <- compute_contribs(pce, categories = CHECK_ITEMS)
core_nhs <- make_core_non_housing_services(pce)
# Remove the baseline services-ex-energy row (now represented by Core NHS)
cleaned <- base %>%
filter(!str_detect(LineDescription, "(?i)services excluding energy"))
final <- bind_rows(cleaned, core_nhs) %>%
arrange(LineDescription) %>%
mutate(LineDescription = sub("^\\d+\\s*[-–]\\s*", "", LineDescription)) %>%
rename(
`Past 1 Month`  = m1_ann,
`Past 3 Months` = m3_ann,
`2025 (So far)` = since_d,   # ANNUALIZED since Dec 2024
`2024`          = yoy_2024,  # Dec/Dec raw
`2018-2019`     = a_1819     # ANNUALIZED over 24 months
)
final
}
# ── Render GT table and save ────────────────────────────────────────────────────
render_gt <- function(tbl, pce, file = "graphics/inflation_chart.png") {
chart_date <- format(max(pce$date, na.rm = TRUE), "%B %Y")
tbl %>%
gt(rowname_col = "LineDescription") %>%
tab_header(
title    = md(paste0("**Breakdown of Weighted Contribution to ", chart_date, " PCE Inflation**")),
subtitle = "Rolling rates are annualized; anchor spans as labeled"
) %>%
cols_align(align = "center", columns = everything()) %>%
fmt_percent(
columns = c(
"Past 1 Month",
"Past 3 Months",
"2025 (So far)",
"2024",
"2018-2019"
),
decimals = 2
) %>%
tab_source_note("Totals may differ slightly due to rounding. BEA, Author’s analysis. Mike Konczal.") %>%
opt_stylize(style = 6, color = "blue") %>%
gtsave(filename = file)
}
# ── Driver (one call) ───────────────────────────────────────────────────────────
build_pce_table <- function(pce,
categories = CHECK_ITEMS,
out_file = "graphics/inflation_chart.png") {
tbl <- assemble_table(pce)
render_gt(tbl, pce, file = out_file)
invisible(tbl)
}
# ── EXAMPLE (uncomment to run) ─────────────────────────────────────────────────
tbl <- build_pce_table(pce)
# View(tbl)
# ── Libraries ───────────────────────────────────────────────────────────────────
library(tidyverse)
library(lubridate)
library(janitor)
library(gt)
# ── Config (edit these) ─────────────────────────────────────────────────────────
CHECK_ITEMS <- c(
"PCE services excluding energy",
"PCE goods excluding food and energy",
"PCE food and energy",
"Housing",
"Personal consumption expenditures"
)
# Optional mapping to pretty names + ordering
RENAME_ORDER <- c(
"Personal consumption expenditures"   = "1 - Total PCE Inflation",
"PCE food and energy"                 = "2 - Food and Energy",
"PCE goods excluding food and energy" = "3 - Core Goods",
"Housing"                             = "5 - Housing"
)
# ── Helper: safe lagged weight (use t-1 weight where possible) ──────────────────
lagged_weight <- function(w, n = 1) {
out <- dplyr::lag(w, n)
dplyr::coalesce(out, w)
}
# ── Helper: integer months between two month-start dates (no days) ──────────────
months_between <- function(start_date, end_date) {
12L * (lubridate::year(end_date) - lubridate::year(start_date)) +
(lubridate::month(end_date) - lubridate::month(start_date))
}
# ── Helper: compute weighted contribution for a rolling k-month window ─────────
period_contrib <- function(x, k_months, annualize = FALSE) {
lvl_now  <- x$DataValue
lvl_then <- dplyr::lag(x$DataValue, k_months)
raw_rate <- (lvl_now / lvl_then) - 1
rate <- if (annualize) (1 + raw_rate)^(12 / k_months) - 1 else raw_rate
w_tm1 <- lagged_weight(x$PCEweight, 1)
rate * w_tm1
}
# ── Helper: fixed-date pair contribution (t1 vs t0), month-based annualizing ───
fixed_pair_contrib <- function(df_g, start_date, end_date, annualize = FALSE) {
v1 <- df_g$DataValue[df_g$date == end_date]
v0 <- df_g$DataValue[df_g$date == start_date]
if (length(v1) == 0 || length(v0) == 0) return(NA_real_)
raw_rate <- (v1 / v0) - 1
if (annualize) {
m_span <- months_between(start_date, end_date)
if (m_span <= 0) return(NA_real_)
rate <- (1 + raw_rate)^(12 / m_span) - 1
} else {
rate <- raw_rate
}
# use t-1 weight at end_date when available; else end_date weight
w_end  <- df_g$PCEweight[df_g$date == end_date]
w_lag1 <- df_g$PCEweight[df_g$date == (end_date %m-% months(1))]
w_use  <- ifelse(length(w_lag1) == 1, w_lag1, w_end)
if (length(w_use) == 0) return(NA_real_)
rate * w_use
}
# ── Helper: “since {start} to latest” using month-based annualizing ────────────
since_date_contrib <- function(df_g, start_date, annualize = FALSE) {
end_date <- max(df_g$date, na.rm = TRUE)
fixed_pair_contrib(df_g, start_date, end_date, annualize = annualize)
}
# ── Core: compute all requested columns for each category ───────────────────────
compute_contribs <- function(pce, categories = CHECK_ITEMS) {
p <- pce %>%
filter(LineDescription %in% categories) %>%
select(date, LineDescription, DataValue, PCEweight) %>%
arrange(LineDescription, date)
rolls <- p %>%
group_by(LineDescription) %>%
arrange(date, .by_group = TRUE) %>%
mutate(
m1_ann = period_contrib(pick(everything()), k_months = 1, annualize = TRUE),
m3_ann = period_contrib(pick(everything()), k_months = 3, annualize = TRUE)
) %>%
filter(date == max(date)) %>%
ungroup() %>%
select(LineDescription, m1_ann, m3_ann)
anchors <- p %>%
group_by(LineDescription) %>%
summarize(
# Since Dec 2024 → latest, ANNUALIZED (month-count based)
since_d  = since_date_contrib(pick(everything()), as.Date("2024-12-01"), annualize = TRUE),
# Dec '23 → Dec '24 (12-month span): leave as raw Dec/Dec rate
yoy_2024 = fixed_pair_contrib(pick(everything()), as.Date("2023-12-01"), as.Date("2024-12-01"), annualize = FALSE),
# Dec '17 → Dec '19 (24 months), ANNUALIZED (month-count based)
a_1819   = fixed_pair_contrib(pick(everything()), as.Date("2017-12-01"), as.Date("2019-12-01"), annualize = TRUE),
.groups = "drop"
)
out <- rolls %>% left_join(anchors, by = "LineDescription")
out %>%
mutate(LineDescription = dplyr::recode(LineDescription, !!!RENAME_ORDER)) %>%
arrange(LineDescription)
}
# ── Core Non-Housing Services = services ex energy minus housing ────────────────
make_core_non_housing_services <- function(pce) {
parts <- compute_contribs(
pce,
categories = c("PCE services excluding energy", "Housing")
) %>%
mutate(key = sub("^\\d+\\s*[-–]\\s*", "", LineDescription))  # strip any "5 - " prefix
row_services <- parts %>% filter(str_detect(key, "(?i)^PCE services excluding energy$"))
row_housing  <- parts %>% filter(str_detect(key, "(?i)^Housing$"))
if (nrow(row_services) != 1 || nrow(row_housing) != 1) return(tibble())
measure_cols <- c("m1_ann","m3_ann","since_d","yoy_2024","a_1819")
diffs <- tibble(
LineDescription = "4 - Core Non-Housing Services"
) |>
bind_cols(as_tibble(purrr::map_dfc(measure_cols, ~ row_services[[.x]] - row_housing[[.x]])) |>
set_names(measure_cols))
diffs
}
# ── Assemble final table (adds Core NHS, drops baseline services row) ───────────
assemble_table <- function(pce) {
base <- compute_contribs(pce, categories = CHECK_ITEMS)
core_nhs <- make_core_non_housing_services(pce)
# Remove the baseline services-ex-energy row (now represented by Core NHS)
cleaned <- base %>%
filter(!str_detect(LineDescription, "(?i)services excluding energy"))
final <- bind_rows(cleaned, core_nhs) %>%
arrange(LineDescription) %>%
mutate(LineDescription = sub("^\\d+\\s*[-–]\\s*", "", LineDescription)) %>%
rename(
`Past 1 Month`  = m1_ann,
`Past 3 Months` = m3_ann,
`2025 (So far)` = since_d,   # ANNUALIZED since Dec 2024
`2024`          = yoy_2024,  # Dec/Dec raw
`2018-2019`     = a_1819     # ANNUALIZED over 24 months
)
final
}
# ── Render GT table and save ────────────────────────────────────────────────────
render_gt <- function(tbl, pce, file = "graphics/inflation_chart.png") {
chart_date <- format(max(pce$date, na.rm = TRUE), "%B %Y")
tbl %>%
gt(rowname_col = "LineDescription") %>%
tab_header(
title    = md(paste0("**Breakdown of Weighted Contribution to ", chart_date, " PCE Inflation**")),
subtitle = "All rates are annualized."
) %>%
cols_align(align = "center", columns = everything()) %>%
fmt_percent(
columns = c(
"Past 1 Month",
"Past 3 Months",
"2025 (So far)",
"2024",
"2018-2019"
),
decimals = 2
) %>%
tab_source_note("Totals may differ slightly due to rounding. BEA, Author’s analysis. Mike Konczal.") %>%
opt_stylize(style = 6, color = "blue") %>%
gtsave(filename = file)
}
# ── Driver (one call) ───────────────────────────────────────────────────────────
build_pce_table <- function(pce,
categories = CHECK_ITEMS,
out_file = "graphics/inflation_chart.png") {
tbl <- assemble_table(pce)
render_gt(tbl, pce, file = out_file)
invisible(tbl)
}
# ── EXAMPLE (uncomment to run) ─────────────────────────────────────────────────
tbl <- build_pce_table(pce)
# View(tbl)
# Get preloaded categories and levels for each from data file.
lowest <- read_csv("data/pce_items_lowest.csv")
library(quantmod)
library(bea.R)
library(tidyverse)
library(lubridate)
library(scales)
# Function to remove outliers for graphics
remove_outliers <- function(x, multiplier = 1.5) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)
Q3 <- quantile(x, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - multiplier * IQR
upper_bound <- Q3 + multiplier * IQR
x[(x < lower_bound) | (x > upper_bound)] <- NA
return(x)
}
# Function for formatting percent signs in charts.
f_pct <- function(n) {
return(str_c(sprintf('%.f', 100*n), "%"))
}
# Get preloaded categories and levels for each from data file.
lowest <- read_csv("data/pce_items_lowest.csv")
months_change <- 12
compare_date <- "2022-11-01"
recent <-pce %>% group_by(date) %>%
# This removes duplicates values put in the BEA underlying table.
distinct(LineNumber, .keep_all = TRUE) %>%
ungroup() %>%
group_by(LineDescription) %>%
# Take the six-month change in inflation and quantities for all values and all dates.
mutate(QuantityFinal = Quantity/lag(Quantity,months_change)-1,
PriceFinal = DataValue/lag(DataValue,months_change)-1,
) %>%
# Isolate the latest date and the comparison date.
filter(date == max(date) | date == compare_date) %>%
# Take the difference in rates, so using a deceleration, and keep the latest weight.
summarize(QuantityFinal = QuantityFinal[date == max(date)] - QuantityFinal[date == compare_date],
PriceFinal = PriceFinal[date == max(date)] - PriceFinal[date == compare_date],
weight = PCEweight[date == max(date)]) %>%
ungroup()
pce_supply %>%
mutate(QuantityFinal = remove_outliers(QuantityFinal, 4)) %>%
ggplot(aes(QuantityFinal,PriceFinal,size=weight, color=category)) + geom_point(aes(fill="skyblue"), alpha=0.5, shape = 21, color = "black", stroke = 1.5, show.legend=FALSE) +
theme_classic() + geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
theme(text = element_text(size = 22)) +
labs(y = "Price (Inflation)",
x = "Quantity",
subtitle="Change in 12-month change, inflation and quantity, 123 PCE categories.\n12-month change Nov 2023 compared to baseline 12-month change November 2022.",
title="80 Percent of Inflation Deceleration is Happening Where Supply is Increasing",
caption = "NIPA tables 2.4.3U, 2.4.4U, 2.4.5U. Mike Konczal, Roosevelt Institute.") +
facet_wrap(~category) +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(labels = scales::percent) +
theme(plot.title.position = "plot") +  theme(strip.background = element_blank())
library(bea.R)
library(tidyverse)
library(lubridate)
library(scales)
library(viridis)
library(janitor)
library(ggrepel)
library(quantmod)
library(tidyusmacro)
nipa <- getNIPAFiles(type = "M")
pce <- getPCEInflation(frequency = "M", NIPA_data = nipa) %>%
mutate(LineDescription = SeriesLabel, DataValue = Value)
max(pce$date)
# This creates a graphic with three images
title_three_dashboard <- "I Love it When a Plan Comes Together: Goods Zero, Non-Housing Services Slowing"
three_twelve_graphic <- "Inflation Over the Past Three Months Have Finally Dropped"
title_overview <- "PCE Inflation Fell Last Month"
date_breaks <- sort(unique(pce$date), decreasing = TRUE)
date_breaks <- date_breaks[seq(1, length(date_breaks), 6)]
tk <- date_breaks_n(pce$date, 6)
tk
date_breaks == df
date_breaks - df
as.numeric(date_breaks) - as.numeric(df)
as.numeric(date_breaks) - as.numeric(df)
as.numeric(date_breaks)
df
tk
as.numeric(date_breaks) - as.numeric(tk)
pce %>%
filter(date >= "2022-01-01", LineDescription == "PCE excluding food and energy") %>%
mutate(DataValue_P1a = (1 + DataValue_P1)^12 - 1) %>%
filter(DataValue_P1a > -0.04) %>%
select(date, LineDescription, DataValue_P1a) %>%
mutate(num_label = round(100 * DataValue_P1a, 1)) %>%
mutate(num_label = ifelse(abs(num_label) < 0.16, NA, num_label)) %>%
mutate(num_label = ifelse(date >= "2025-01-01", num_label, NA)) %>%
ggplot(aes(x = date, y = DataValue_P1a, label = num_label)) +
geom_bar(stat = "identity", size = 0, fill=esp_navy) +
labs(
y = NULL,
x = NULL,
title = title_overview,
subtitle = "Monthly percent increase in PCE core goods and services, annualized.",
caption = "BEA, NIPA Tables 2.4.4 and 2.4.5, author's calculations. Author's calculation. Mike Konczal, Roosevelt Institute"
) +
scale_fill_brewer(palette = "Paired") +
theme(panel.grid.major.y = element_line(size = 0.5)) +
theme(plot.title.position = "plot") +
scale_y_continuous(labels = percent) +
geom_text(aes(x = date, y = DataValue_P1a, label = num_label), nudge_y = 0.002, size = 3, color = esp_navy) +
scale_x_date(date_labels = "%b\n%Y", breaks = date_breaks) +
theme_esp()
##### BASELINE GRAPHIC
##### Graphic1: Core Inflation ####
pce %>%
filter(date >= "2022-01-01", LineDescription == "PCE excluding food and energy") %>%
mutate(DataValue_P1a = (1 + DataValue_P1)^12 - 1) %>%
filter(DataValue_P1a > -0.04) %>%
select(date, LineDescription, DataValue_P1a) %>%
mutate(num_label = round(100 * DataValue_P1a, 1)) %>%
mutate(num_label = ifelse(abs(num_label) < 0.16, NA, num_label)) %>%
mutate(num_label = ifelse(date >= "2025-01-01", num_label, NA)) %>%
ggplot(aes(x = date, y = DataValue_P1a, label = num_label)) +
geom_bar(stat = "identity", size = 0, fill=esp_navy) +
labs(
y = NULL,
x = NULL,
title = title_overview,
subtitle = "Monthly percent increase in PCE core goods and services, annualized.",
caption = "BEA, NIPA Tables 2.4.4 and 2.4.5, author's calculations. Author's calculation. Mike Konczal, Roosevelt Institute"
) +
scale_fill_brewer(palette = "Paired") +
theme(panel.grid.major.y = element_line(size = 0.5)) +
theme(plot.title.position = "plot") +
scale_y_continuous(labels = percent) +
geom_text(aes(x = date, y = DataValue_P1a, label = num_label), nudge_y = 0.002, size = 3, color = esp_navy) +
scale_x_date(date_labels = "%b\n%Y", breaks = date_breaks_n(date, 6)) +
theme_esp()
date_breaks <- sort(unique(pce$date), decreasing = TRUE)
date_breaks <- date_breaks[seq(1, length(date_breaks), 6)]
##### BASELINE GRAPHIC
##### Graphic1: Core Inflation ####
pce %>%
filter(date >= "2022-01-01", LineDescription == "PCE excluding food and energy") %>%
mutate(DataValue_P1a = (1 + DataValue_P1)^12 - 1) %>%
filter(DataValue_P1a > -0.04) %>%
select(date, LineDescription, DataValue_P1a) %>%
mutate(num_label = round(100 * DataValue_P1a, 1)) %>%
mutate(num_label = ifelse(abs(num_label) < 0.16, NA, num_label)) %>%
mutate(num_label = ifelse(date >= "2025-01-01", num_label, NA)) %>%
ggplot(aes(x = date, y = DataValue_P1a, label = num_label)) +
geom_bar(stat = "identity", size = 0, fill=esp_navy) +
labs(
y = NULL,
x = NULL,
title = title_overview,
subtitle = "Monthly percent increase in PCE core goods and services, annualized.",
caption = "BEA, NIPA Tables 2.4.4 and 2.4.5, author's calculations. Author's calculation. Mike Konczal, Roosevelt Institute"
) +
scale_fill_brewer(palette = "Paired") +
theme(panel.grid.major.y = element_line(size = 0.5)) +
theme(plot.title.position = "plot") +
scale_y_continuous(labels = percent) +
geom_text(aes(x = date, y = DataValue_P1a, label = num_label), nudge_y = 0.002, size = 3, color = esp_navy) +
scale_x_date(date_labels = "%b\n%Y", breaks = date_breaks) +
theme_esp()
date_breaks <- date_breaks_n(pce$date, 6)
##### BASELINE GRAPHIC
##### Graphic1: Core Inflation ####
pce %>%
filter(date >= "2022-01-01", LineDescription == "PCE excluding food and energy") %>%
mutate(DataValue_P1a = (1 + DataValue_P1)^12 - 1) %>%
filter(DataValue_P1a > -0.04) %>%
select(date, LineDescription, DataValue_P1a) %>%
mutate(num_label = round(100 * DataValue_P1a, 1)) %>%
mutate(num_label = ifelse(abs(num_label) < 0.16, NA, num_label)) %>%
mutate(num_label = ifelse(date >= "2025-01-01", num_label, NA)) %>%
ggplot(aes(x = date, y = DataValue_P1a, label = num_label)) +
geom_bar(stat = "identity", size = 0, fill=esp_navy) +
labs(
y = NULL,
x = NULL,
title = title_overview,
subtitle = "Monthly percent increase in PCE core goods and services, annualized.",
caption = "BEA, NIPA Tables 2.4.4 and 2.4.5, author's calculations. Author's calculation. Mike Konczal, Roosevelt Institute"
) +
scale_fill_brewer(palette = "Paired") +
theme(panel.grid.major.y = element_line(size = 0.5)) +
theme(plot.title.position = "plot") +
scale_y_continuous(labels = percent) +
geom_text(aes(x = date, y = DataValue_P1a, label = num_label), nudge_y = 0.002, size = 3, color = esp_navy) +
scale_x_date(date_labels = "%b\n%Y", breaks = date_breaks) +
theme_esp()
date_breaks <- date_breaks_n(pce$date, 12)
##### BASELINE GRAPHIC
##### Graphic1: Core Inflation ####
pce %>%
filter(date >= "2022-01-01", LineDescription == "PCE excluding food and energy") %>%
mutate(DataValue_P1a = (1 + DataValue_P1)^12 - 1) %>%
filter(DataValue_P1a > -0.04) %>%
select(date, LineDescription, DataValue_P1a) %>%
mutate(num_label = round(100 * DataValue_P1a, 1)) %>%
mutate(num_label = ifelse(abs(num_label) < 0.16, NA, num_label)) %>%
mutate(num_label = ifelse(date >= "2025-01-01", num_label, NA)) %>%
ggplot(aes(x = date, y = DataValue_P1a, label = num_label)) +
geom_bar(stat = "identity", size = 0, fill=esp_navy) +
labs(
y = NULL,
x = NULL,
title = title_overview,
subtitle = "Monthly percent increase in PCE core goods and services, annualized.",
caption = "BEA, NIPA Tables 2.4.4 and 2.4.5, author's calculations. Author's calculation. Mike Konczal, Roosevelt Institute"
) +
scale_fill_brewer(palette = "Paired") +
theme(panel.grid.major.y = element_line(size = 0.5)) +
theme(plot.title.position = "plot") +
scale_y_continuous(labels = percent) +
geom_text(aes(x = date, y = DataValue_P1a, label = num_label), nudge_y = 0.002, size = 3, color = esp_navy) +
scale_x_date(date_labels = "%b\n%Y", breaks = date_breaks) +
theme_esp()
date_breaks_n(pce$date, 6)
date_breaks_n(pce$date, 6) %>% pull()
library(bea.R)
library(tidyverse)
library(lubridate)
library(scales)
library(viridis)
library(janitor)
library(ggrepel)
library(quantmod)
library(tidyusmacro)
nipa <- getNIPAFiles(type = "M")
